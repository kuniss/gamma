// left-defining grammar that is no strong LAG

X = 'a' | 'b'.

S <+  X>: A <X> | B <X> | C <X> | D <X>.

/*
An LAG is a strong LAG if the actual parameters of the closing braces
of a repetition meet certain conditions. These conditions allow for a simple
implementation of the repetition by a loop instead of a recursive descent.
*/

// cannot analyze bottom up
A <+ X>: 'a' <X> { <+ 'b': X> 'a' <'a'> } <+ 'a': X>.

// cannot synthesize multiple times bottom up
B <+ X1>: 'b' <X1, X2> { <+ X1, + X1> 'b' <X1, X2> } <+ 'a': X, + 'b': X>.

// cannot check for equality bottom up
C <+ X1>: 'c' <X1, X2> { <+ X, + 'b': X> 'c' <X, X> } <+ 'a': X, + 'a': X>.

// cannot check for inequality bottom up
D <+ X1>: 'd' <X1, X2> { <+ X, + 'a': X> 'd' <X, !X> } <+ 'a': X, + 'b': X>.
